{
  "discovered": [
    {
      "name": "google-maps",
      "full_name": "sigyl-dev/google-maps",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/google-maps",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "apiKey"
            ],
            "properties": {
              "apiKey": {
                "type": "string",
                "title": "Google Maps API Key",
                "description": "Google Maps API key. Get one from https://mapsplatform.google.com (required)"
              },
              "debug": {
                "type": "boolean",
                "title": "Enable Debug Logging",
                "description": "Enable debug logging",
                "default": false
              }
            }
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/google-maps",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "github",
      "full_name": "sigyl-dev/github",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/github",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "githubPersonalAccessToken"
            ],
            "properties": {
              "githubPersonalAccessToken": {
                "type": "string",
                "title": "GitHub Personal Access Token",
                "description": "Personal access token for authenticating with the GitHub API (required)"
              },
              "profile": {
                "type": "string",
                "title": "Profile",
                "description": "The profile to use for this connection",
                "default": "Personal",
                "enum": [
                  "Personal",
                  "Work"
                ]
              },
              "environment": {
                "type": "string",
                "title": "Environment",
                "description": "Deployment environment",
                "enum": [
                  "development",
                  "staging",
                  "production"
                ],
                "default": "development"
              }
            }
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/github",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "slack",
      "full_name": "sigyl-dev/slack",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/slack",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "string",
                "title": "Slack Token",
                "description": "Secret Slack token for authentication (required)"
              }
            }
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/slack",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "notion",
      "full_name": "sigyl-dev/notion",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/notion",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "notionApiKey",
              "environment"
            ],
            "properties": {
              "notionApiKey": {
                "type": "string",
                "title": "Notion API Key",
                "description": "Notion API key, obtained from https://www.notion.so/profile/integrations/ (required)"
              },
              "serviceName": {
                "type": "string",
                "title": "Service Name",
                "default": "my-mcp-notion-service",
                "description": "Name of the MCP-compatible Notion service"
              },
              "logLevel": {
                "type": "string",
                "title": "Log Level",
                "default": "info",
                "enum": [
                  "debug",
                  "info",
                  "warn",
                  "error"
                ],
                "description": "Logging verbosity level"
              },
              "timeout": {
                "type": "number",
                "title": "Timeout",
                "description": "Request timeout in seconds",
                "default": 30,
                "minimum": 1,
                "maximum": 300
              },
              "enableMetrics": {
                "type": "boolean",
                "title": "Enable Metrics",
                "description": "Enable metrics collection",
                "default": false
              },
              "allowedClients": {
                "type": "array",
                "title": "Allowed Clients",
                "description": "List of client IDs allowed to access the server",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "customSettings": {
                "type": "object",
                "title": "Custom Settings",
                "description": "Advanced custom settings for the server",
                "properties": {
                  "maxConnections": {
                    "type": "number",
                    "default": 100
                  },
                  "useCache": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "default": {}
              },
              "environment": {
                "type": "string",
                "title": "Environment",
                "description": "Deployment environment",
                "enum": [
                  "development",
                  "staging",
                  "production"
                ],
                "default": "development"
              }
            }
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/notion",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "Sequential-Thinking",
      "full_name": "sigyl-dev/Sequential-Thinking",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Sequential-Thinking",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript"
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Sequential-Thinking",
      "validation_result": {
        "isValid": true,
        "issues": [
          {
            "type": "warning",
            "field": "startCommand",
            "message": "No startCommand configuration found",
            "suggestion": "Consider adding startCommand with configSchema for secrets management"
          }
        ]
      }
    },
    {
      "name": "weather",
      "full_name": "sigyl-dev/weather",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/weather",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http"
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/weather",
      "validation_result": {
        "isValid": true,
        "issues": [
          {
            "type": "warning",
            "field": "startCommand.configSchema",
            "message": "No configSchema found in startCommand",
            "suggestion": "Add configSchema to define required API keys and configuration"
          }
        ]
      }
    },
    {
      "name": "context7",
      "full_name": "sigyl-dev/context7",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/context7",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "description": "No configuration required"
          },
          "exampleConfig": {}
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/context7",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "hubspot",
      "full_name": "sigyl-dev/hubspot",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/hubspot",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "apiKey",
              "HUBSPOT_ACCESS_TOKEN",
              "environment"
            ],
            "properties": {
              "apiKey": {
                "type": "string",
                "title": "MCP API Key",
                "description": "Your MCP API key (required)"
              },
              "HUBSPOT_ACCESS_TOKEN": {
                "type": "string",
                "title": "HUBSPOT_ACCESS_TOKEN",
                "description": "Your HubSpot API access token (required)"
              },
              "serviceName": {
                "type": "string",
                "title": "Service Name",
                "default": "my-mcp-service",
                "description": "Name of the MCP-compatible service"
              },
              "logLevel": {
                "type": "string",
                "title": "Log Level",
                "default": "info",
                "enum": [
                  "debug",
                  "info",
                  "warn",
                  "error"
                ],
                "description": "Logging verbosity level"
              },
              "timeout": {
                "type": "number",
                "title": "Timeout",
                "description": "Request timeout in seconds",
                "default": 30,
                "minimum": 1,
                "maximum": 300
              },
              "enableMetrics": {
                "type": "boolean",
                "title": "Enable Metrics",
                "description": "Enable metrics collection",
                "default": false
              },
              "allowedClients": {
                "type": "array",
                "title": "Allowed Clients",
                "description": "List of client IDs allowed to access the server",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "customSettings": {
                "type": "object",
                "title": "Custom Settings",
                "description": "Advanced custom settings for the server",
                "properties": {
                  "maxConnections": {
                    "type": "number",
                    "default": 100
                  },
                  "useCache": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "default": {}
              },
              "environment": {
                "type": "string",
                "title": "Environment",
                "description": "Deployment environment",
                "enum": [
                  "development",
                  "staging",
                  "production"
                ],
                "default": "development"
              }
            }
          },
          "exampleConfig": {
            "apiKey": "your-mcp-api-key-here",
            "HUBSPOT_ACCESS_TOKEN": "your-hubspot-token-here",
            "serviceName": "my-mcp-service",
            "logLevel": "info",
            "timeout": 30,
            "enableMetrics": false,
            "allowedClients": [],
            "customSettings": {
              "maxConnections": 100,
              "useCache": true
            },
            "environment": "development"
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/hubspot",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "Exa-Search",
      "full_name": "sigyl-dev/Exa-Search",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Exa-Search",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "properties": {
              "debug": {
                "type": "boolean",
                "title": "Debug",
                "description": "Enable debug logging",
                "default": false
              },
              "exaApiKey": {
                "type": "string",
                "title": "Exa API Key",
                "description": "Exa AI API key for search operations"
              },
              "enabledTools": {
                "type": "array",
                "title": "Enabled Tools",
                "description": "List of tools to enable (if not specified, all tools are enabled)",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Exa-Search",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "Desktop-Commander",
      "full_name": "sigyl-dev/Desktop-Commander",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Desktop-Commander",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "properties": {}
          },
          "commandFunction": "(config) => ({ command: 'node', args: ['dist/index.js'] })",
          "exampleConfig": {}
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Desktop-Commander",
      "validation_result": {
        "isValid": true,
        "issues": [
          {
            "type": "fixed",
            "field": "startCommand.type",
            "message": "Set startCommand.type to \"http\" (required for MCP servers)",
            "autoFixed": true
          }
        ],
        "fixedConfig": {
          "runtime": "node",
          "language": "typescript",
          "startCommand": {
            "type": "http",
            "configSchema": {
              "type": "object",
              "properties": {}
            },
            "commandFunction": "(config) => ({ command: 'node', args: ['dist/index.js'] })",
            "exampleConfig": {}
          }
        }
      }
    },
    {
      "name": "perplexity",
      "full_name": "sigyl-dev/perplexity",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/perplexity",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "perplexityApiKey",
              "environment"
            ],
            "properties": {
              "perplexityApiKey": {
                "type": "string",
                "title": "Perplexity API Key",
                "description": "Your Perplexity API key (required)"
              },
              "serviceName": {
                "type": "string",
                "title": "Service Name",
                "default": "my-mcp-service",
                "description": "Name of the MCP-compatible service"
              },
              "logLevel": {
                "type": "string",
                "title": "Log Level",
                "default": "info",
                "enum": [
                  "debug",
                  "info",
                  "warn",
                  "error"
                ],
                "description": "Logging verbosity level"
              },
              "timeout": {
                "type": "number",
                "title": "Timeout",
                "description": "Request timeout in seconds",
                "default": 30,
                "minimum": 1,
                "maximum": 300
              },
              "enableMetrics": {
                "type": "boolean",
                "title": "Enable Metrics",
                "description": "Enable metrics collection",
                "default": false
              },
              "allowedClients": {
                "type": "array",
                "title": "Allowed Clients",
                "description": "List of client IDs allowed to access the server",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "customSettings": {
                "type": "object",
                "title": "Custom Settings",
                "description": "Advanced custom settings for the server",
                "properties": {
                  "maxConnections": {
                    "type": "number",
                    "default": 100
                  },
                  "useCache": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "default": {}
              },
              "environment": {
                "type": "string",
                "title": "Environment",
                "description": "Deployment environment",
                "enum": [
                  "development",
                  "staging",
                  "production"
                ],
                "default": "development"
              }
            }
          },
          "commandFunction": "(config) => ({\n  command: 'node',\n  args: ['dist/index.js'],\n  env: {\n    PERPLEXITY_API_KEY: config.perplexityApiKey,\n    SERVICE_NAME: config.serviceName,\n    LOG_LEVEL: config.logLevel,\n    TIMEOUT: config.timeout,\n    ENABLE_METRICS: config.enableMetrics,\n    ALLOWED_CLIENTS: Array.isArray(config.allowedClients) ? config.allowedClients.join(',') : undefined,\n    CUSTOM_SETTINGS: config.customSettings ? JSON.stringify(config.customSettings) : undefined,\n    ENVIRONMENT: config.environment\n  }\n})",
          "exampleConfig": {
            "perplexityApiKey": "dummy_key_here",
            "serviceName": "my-mcp-service",
            "logLevel": "info",
            "timeout": 30,
            "enableMetrics": false,
            "allowedClients": [],
            "customSettings": {},
            "environment": "development"
          }
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/perplexity",
      "validation_result": {
        "isValid": true,
        "issues": []
      }
    },
    {
      "name": "Office-Word",
      "full_name": "sigyl-dev/Office-Word",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Office-Word",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "python",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "description": "No configuration options required"
          },
          "commandFunction": "(config) => ({command:'word_mcp_server', args:[]})",
          "exampleConfig": {}
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Office-Word",
      "validation_result": {
        "isValid": false,
        "issues": [
          {
            "type": "error",
            "field": "language",
            "message": "Invalid language value. Must be \"typescript\" or \"javascript\"",
            "suggestion": "Change language to \"typescript\" or \"javascript\", or remove it for container runtime"
          },
          {
            "type": "fixed",
            "field": "startCommand.type",
            "message": "Set startCommand.type to \"http\" (required for MCP servers)",
            "autoFixed": true
          }
        ],
        "fixedConfig": {
          "runtime": "node",
          "language": "python",
          "startCommand": {
            "type": "http",
            "configSchema": {
              "type": "object",
              "description": "No configuration options required"
            },
            "commandFunction": "(config) => ({command:'word_mcp_server', args:[]})",
            "exampleConfig": {}
          }
        }
      }
    },
    {
      "name": "DuckDuckGo",
      "full_name": "sigyl-dev/DuckDuckGo",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/DuckDuckGo",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "python",
        "startCommand": {
          "type": "http",
          "configSchema": {},
          "commandFunction": "(config) => ({ command: 'python', args: ['-m', 'duckduckgo_mcp_server.server'] })",
          "exampleConfig": {}
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/DuckDuckGo",
      "validation_result": {
        "isValid": false,
        "issues": [
          {
            "type": "error",
            "field": "language",
            "message": "Invalid language value. Must be \"typescript\" or \"javascript\"",
            "suggestion": "Change language to \"typescript\" or \"javascript\", or remove it for container runtime"
          },
          {
            "type": "fixed",
            "field": "startCommand.type",
            "message": "Set startCommand.type to \"http\" (required for MCP servers)",
            "autoFixed": true
          }
        ],
        "fixedConfig": {
          "runtime": "node",
          "language": "python",
          "startCommand": {
            "type": "http",
            "configSchema": {},
            "commandFunction": "(config) => ({ command: 'python', args: ['-m', 'duckduckgo_mcp_server.server'] })",
            "exampleConfig": {}
          }
        }
      }
    },
    {
      "name": "Brave-Search",
      "full_name": "sigyl-dev/Brave-Search",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Brave-Search",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "build": {
          "dockerBuildPath": "../../"
        },
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "braveApiKey"
            ],
            "properties": {
              "braveApiKey": {
                "type": "string",
                "description": "The API key for the BRAVE Search server."
              }
            }
          },
          "commandFunction": "config=>({command:'node',args:['dist/index.js'],env:{BRAVE_API_KEY:config.braveApiKey}})"
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Brave-Search",
      "validation_result": {
        "isValid": true,
        "issues": [
          {
            "type": "fixed",
            "field": "startCommand.type",
            "message": "Set startCommand.type to \"http\" (required for MCP servers)",
            "autoFixed": true
          }
        ],
        "fixedConfig": {
          "runtime": "node",
          "language": "typescript",
          "build": {
            "dockerBuildPath": "../../"
          },
          "startCommand": {
            "type": "http",
            "configSchema": {
              "type": "object",
              "required": [
                "braveApiKey"
              ],
              "properties": {
                "braveApiKey": {
                  "type": "string",
                  "description": "The API key for the BRAVE Search server."
                }
              }
            },
            "commandFunction": "config=>({command:'node',args:['dist/index.js'],env:{BRAVE_API_KEY:config.braveApiKey}})"
          }
        }
      }
    },
    {
      "name": "Todoist",
      "full_name": "sigyl-dev/Todoist",
      "description": "",
      "html_url": "https://github.com/sigyl-dev/Todoist",
      "has_sigyl": true,
      "has_smithery": false,
      "config_file": "sigyl.yaml",
      "config_content": {
        "runtime": "node",
        "language": "typescript",
        "startCommand": {
          "type": "http",
          "configSchema": {
            "type": "object",
            "required": [
              "todoistApiKey"
            ],
            "properties": {
              "todoistApiKey": {
                "type": "string",
                "title": "todoistApiKey",
                "description": "The API key for the Todoist server.",
                "secret": true
              },
              "serviceName": {
                "type": "string",
                "title": "Service Name",
                "default": "todoist-mcp",
                "description": "Name of the Todoist MCP-compatible service"
              },
              "logLevel": {
                "type": "string",
                "title": "Log Level",
                "default": "info",
                "enum": [
                  "debug",
                  "info",
                  "warn",
                  "error"
                ],
                "description": "Logging verbosity level"
              },
              "timeout": {
                "type": "number",
                "title": "Timeout",
                "description": "Request timeout in seconds",
                "default": 30,
                "minimum": 1,
                "maximum": 300
              },
              "enableMetrics": {
                "type": "boolean",
                "title": "Enable Metrics",
                "description": "Enable metrics collection",
                "default": false
              },
              "allowedClients": {
                "type": "array",
                "title": "Allowed Clients",
                "description": "List of client IDs allowed to access the server",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "customSettings": {
                "type": "object",
                "title": "Custom Settings",
                "description": "Advanced custom settings for the server",
                "properties": {
                  "maxConnections": {
                    "type": "number",
                    "default": 100
                  },
                  "useCache": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "default": {}
              },
              "environment": {
                "type": "string",
                "title": "Environment",
                "description": "Deployment environment",
                "enum": [
                  "development",
                  "staging",
                  "production"
                ],
                "default": "development"
              }
            }
          },
          "commandFunction": "config => ({command: 'node', args: ['build/index.js'], env: { TODOIST_API_KEY: config.todoistApiKey }})"
        }
      },
      "local_path": "/Users/charliemartin/Desktop/SigilStuff/fuck-smithery/packages/registry-api/bulk-deploy-repos/Todoist",
      "validation_result": {
        "isValid": true,
        "issues": [
          {
            "type": "fixed",
            "field": "startCommand.type",
            "message": "Set startCommand.type to \"http\" (required for MCP servers)",
            "autoFixed": true
          }
        ],
        "fixedConfig": {
          "runtime": "node",
          "language": "typescript",
          "startCommand": {
            "type": "http",
            "configSchema": {
              "type": "object",
              "required": [
                "todoistApiKey"
              ],
              "properties": {
                "todoistApiKey": {
                  "type": "string",
                  "title": "todoistApiKey",
                  "description": "The API key for the Todoist server.",
                  "secret": true
                },
                "serviceName": {
                  "type": "string",
                  "title": "Service Name",
                  "default": "todoist-mcp",
                  "description": "Name of the Todoist MCP-compatible service"
                },
                "logLevel": {
                  "type": "string",
                  "title": "Log Level",
                  "default": "info",
                  "enum": [
                    "debug",
                    "info",
                    "warn",
                    "error"
                  ],
                  "description": "Logging verbosity level"
                },
                "timeout": {
                  "type": "number",
                  "title": "Timeout",
                  "description": "Request timeout in seconds",
                  "default": 30,
                  "minimum": 1,
                  "maximum": 300
                },
                "enableMetrics": {
                  "type": "boolean",
                  "title": "Enable Metrics",
                  "description": "Enable metrics collection",
                  "default": false
                },
                "allowedClients": {
                  "type": "array",
                  "title": "Allowed Clients",
                  "description": "List of client IDs allowed to access the server",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "customSettings": {
                  "type": "object",
                  "title": "Custom Settings",
                  "description": "Advanced custom settings for the server",
                  "properties": {
                    "maxConnections": {
                      "type": "number",
                      "default": 100
                    },
                    "useCache": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "default": {}
                },
                "environment": {
                  "type": "string",
                  "title": "Environment",
                  "description": "Deployment environment",
                  "enum": [
                    "development",
                    "staging",
                    "production"
                  ],
                  "default": "development"
                }
              }
            },
            "commandFunction": "config => ({command: 'node', args: ['build/index.js'], env: { TODOIST_API_KEY: config.todoistApiKey }})"
          }
        }
      }
    }
  ],
  "deployments": [
    {
      "repo": "sigyl-dev/google-maps",
      "success": false,
      "error": "Failed to deploy to Cloud Run: fetch failed",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/github",
      "success": false,
      "error": "Failed to build Node.js runtime: Build failed with status: FAILURE. Log: https://console.cloud.google.com/cloud-build/builds/bc70e844-690a-4883-a1e2-1dc6fcc1721a?project=946398050699",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/slack",
      "success": true,
      "deploymentUrl": "https://sigyl-mcp-sigyl-dev-slack-unknown-us-central1.a.run.app",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/notion",
      "success": false,
      "error": "Failed to build Node.js runtime: fetch failed",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/Sequential-Thinking",
      "success": false,
      "error": "Backend service creation operation did not complete in time",
      "validationIssues": [
        {
          "type": "warning",
          "field": "startCommand",
          "message": "No startCommand configuration found",
          "suggestion": "Consider adding startCommand with configSchema for secrets management"
        }
      ]
    },
    {
      "repo": "sigyl-dev/weather",
      "success": true,
      "deploymentUrl": "https://sigyl-mcp-sigyl-dev-weather-unknown-us-central1.a.run.app",
      "validationIssues": [
        {
          "type": "warning",
          "field": "startCommand.configSchema",
          "message": "No configSchema found in startCommand",
          "suggestion": "Add configSchema to define required API keys and configuration"
        }
      ]
    },
    {
      "repo": "sigyl-dev/context7",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/hubspot",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/Exa-Search",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/Desktop-Commander",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": [
        {
          "type": "fixed",
          "field": "startCommand.type",
          "message": "Set startCommand.type to \"http\" (required for MCP servers)",
          "autoFixed": true
        }
      ]
    },
    {
      "repo": "sigyl-dev/perplexity",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": []
    },
    {
      "repo": "sigyl-dev/Office-Word",
      "success": false,
      "error": "Configuration validation failed: language: Invalid language value. Must be \"typescript\" or \"javascript\"",
      "validationIssues": [
        {
          "type": "error",
          "field": "language",
          "message": "Invalid language value. Must be \"typescript\" or \"javascript\"",
          "suggestion": "Change language to \"typescript\" or \"javascript\", or remove it for container runtime"
        },
        {
          "type": "fixed",
          "field": "startCommand.type",
          "message": "Set startCommand.type to \"http\" (required for MCP servers)",
          "autoFixed": true
        }
      ]
    },
    {
      "repo": "sigyl-dev/DuckDuckGo",
      "success": false,
      "error": "Configuration validation failed: language: Invalid language value. Must be \"typescript\" or \"javascript\"",
      "validationIssues": [
        {
          "type": "error",
          "field": "language",
          "message": "Invalid language value. Must be \"typescript\" or \"javascript\"",
          "suggestion": "Change language to \"typescript\" or \"javascript\", or remove it for container runtime"
        },
        {
          "type": "fixed",
          "field": "startCommand.type",
          "message": "Set startCommand.type to \"http\" (required for MCP servers)",
          "autoFixed": true
        }
      ]
    },
    {
      "repo": "sigyl-dev/Brave-Search",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": [
        {
          "type": "fixed",
          "field": "startCommand.type",
          "message": "Set startCommand.type to \"http\" (required for MCP servers)",
          "autoFixed": true
        }
      ]
    },
    {
      "repo": "sigyl-dev/Todoist",
      "success": false,
      "error": "sigyl.yaml could not be fetched or parsed. Deployment cannot continue.",
      "validationIssues": [
        {
          "type": "fixed",
          "field": "startCommand.type",
          "message": "Set startCommand.type to \"http\" (required for MCP servers)",
          "autoFixed": true
        }
      ]
    }
  ],
  "summary": {
    "total": 15,
    "successful": 2,
    "failed": 13,
    "configErrors": 2,
    "autoFixed": 5
  }
}