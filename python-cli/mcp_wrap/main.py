#!/usr/bin/env python3
"""
MCP Wrap CLI - Generate MCP servers from FastAPI applications

This CLI tool scans FastAPI applications and generates MCP servers
with tools that map to the API endpoints.
"""

import argparse
import sys
import os
import subprocess
import logging
import traceback
from pathlib import Path
from typing import Optional, List
import time

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich import print as rprint
import questionary

# Import our modules
from mcp_wrap.fastapi_scanner import FastAPIScanner
from mcp_wrap.generator import MCPGenerator
from mcp_wrap.inspector import MCPInspector

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mcp_wrap.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

console = Console()

class MCPWrapCLI:
    def __init__(self):
        self.scanner = FastAPIScanner()
        self.generator = MCPGenerator()
        self.inspector = MCPInspector()
    
    def init(self, project_name: str = None, interactive: bool = True):
        """Initialize a new FastAPI project"""
        try:
            if interactive:
                project_name = questionary.text(
                    "Enter project name:",
                    default="my-fastapi-app"
                ).ask()
            
            if not project_name:
                console.print("[red]‚ùå Project name is required[/red]")
                return
            
            project_path = Path(project_name)
            if project_path.exists():
                console.print(f"[red]‚ùå Directory {project_name} already exists[/red]")
                return
            
            # Create project structure
            project_path.mkdir(parents=True)
            
            # Create main.py
            main_content = '''from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional

app = FastAPI(title="My FastAPI App", version="1.0.0")

# Example models
class User(BaseModel):
    id: int
    name: str
    email: str

class CreateUserRequest(BaseModel):
    name: str
    email: str

# Example data
users = [
    User(id=1, name="John Doe", email="john@example.com"),
    User(id=2, name="Jane Smith", email="jane@example.com")
]

@app.get("/")
async def root():
    """Root endpoint"""
    return {"message": "Hello World"}

@app.get("/users", response_model=List[User])
async def get_users():
    """Get all users"""
    return users

@app.get("/users/{user_id}", response_model=User)
async def get_user(user_id: int):
    """Get user by ID"""
    user = next((u for u in users if u.id == user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.post("/users", response_model=User)
async def create_user(user: CreateUserRequest):
    """Create a new user"""
    new_user = User(id=len(users) + 1, name=user.name, email=user.email)
    users.append(new_user)
    return new_user

@app.put("/users/{user_id}", response_model=User)
async def update_user(user_id: int, user: CreateUserRequest):
    """Update user by ID"""
    existing_user = next((u for u in users if u.id == user_id), None)
    if not existing_user:
        raise HTTPException(status_code=404, detail="User not found")
    
    existing_user.name = user.name
    existing_user.email = user.email
    return existing_user

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    """Delete user by ID"""
    user = next((u for u in users if u.id == user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    users.remove(user)
    return {"message": "User deleted successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''
            
            with open(project_path / "main.py", "w") as f:
                f.write(main_content)
            
            # Create requirements.txt
            requirements_content = '''fastapi>=0.104.0
uvicorn[standard]>=0.24.0
pydantic>=2.0.0
'''
            
            with open(project_path / "requirements.txt", "w") as f:
                f.write(requirements_content)
            
            # Create README.md
            readme_content = f'''# {project_name}

A FastAPI application generated by MCP Wrap CLI.

## Setup

1. Install dependencies:
```bash
pip install -r requirements.txt
```

2. Run the application:
```bash
uvicorn main:app --reload
```

3. View the API documentation:
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## Generate MCP Server

To generate an MCP server from this FastAPI app:

```bash
mcp-wrap scan . --out-dir .mcp-generated
```

## Development Mode

For development with hot reload:

```bash
mcp-wrap dev . --out-dir .mcp-generated
```
'''
            
            with open(project_path / "README.md", "w") as f:
                f.write(readme_content)
            
            console.print(f"[green]‚úÖ FastAPI project created: {project_name}[/green]")
            console.print(f"[blue]üìÅ Project location: {project_path.absolute()}[/blue]")
            console.print("\n[yellow]Next steps:[/yellow]")
            console.print("1. cd {project_name}")
            console.print("2. pip install -r requirements.txt")
            console.print("3. uvicorn main:app --reload")
            console.print("4. mcp-wrap scan . --out-dir .mcp-generated")
            
        except Exception as e:
            logger.error(f"Failed to initialize project: {e}")
            console.print(f"[red]‚ùå Failed to initialize project: {e}[/red]")
            if logger.isEnabledFor(logging.DEBUG):
                console.print(f"[red]Traceback: {traceback.format_exc()}[/red]")
    
    def scan(self, app_path: str, out_dir: str = ".mcp-generated", port: int = 8000, interactive: bool = True):
        """Scan FastAPI app and generate MCP server"""
        try:
            if interactive:
                # Get app path
                app_path = questionary.path(
                    "Enter FastAPI app path:",
                    default=app_path or ".",
                    only_directories=True
                ).ask()
                
                if not app_path:
                    app_path = "."
                
                # Get output directory
                out_dir = questionary.text(
                    "Enter output directory:",
                    default=out_dir
                ).ask()
                
                if not out_dir:
                    out_dir = ".mcp-generated"
            
            console.print(f"[bold blue]üîç Scanning FastAPI app: {app_path}[/bold blue]")
            
            # Validate app path
            app_path_obj = Path(app_path)
            if not app_path_obj.exists():
                raise FileNotFoundError(f"App path not found: {app_path}")
            
            # Scan the FastAPI app
            endpoints = self.scanner.scan_fastapi_app(app_path)
            
            if not endpoints:
                console.print("[yellow]‚ö†Ô∏è  No endpoints found in the FastAPI app[/yellow]")
                console.print("[yellow]üí° Make sure your app has FastAPI routes defined[/yellow]")
                return
            
            console.print(f"[green]‚úÖ Found {len(endpoints)} endpoints[/green]")
            
            # Generate MCP server
            console.print(f"[bold blue]üöÄ Generating MCP server...[/bold blue]")
            self.generator.generate_server(endpoints, out_dir, port)
            
            console.print(f"[green]‚úÖ MCP server generated: {out_dir}[/green]")
            console.print("\n[yellow]Next steps:[/yellow]")
            console.print(f"1. cd {out_dir}")
            console.print("2. python server.py")
            console.print("3. mcp-wrap inspect")
            
        except FileNotFoundError as e:
            logger.error(f"File not found: {e}")
            console.print(f"[red]‚ùå {e}[/red]")
        except Exception as e:
            logger.error(f"Failed to scan app: {e}")
            console.print(f"[red]‚ùå Failed to scan app: {e}[/red]")
            if logger.isEnabledFor(logging.DEBUG):
                console.print(f"[red]Traceback: {traceback.format_exc()}[/red]")
    
    def dev(self, app_path: str, out_dir: str = ".mcp-generated", port: int = 8000, mcp_port: int = 8181):
        """Development mode with hot reload"""
        try:
            console.print(f"[bold blue]üöÄ Starting development mode...[/bold blue]")
            console.print(f"FastAPI app: {app_path}")
            console.print(f"MCP server: {out_dir}")
            console.print(f"FastAPI port: {port}")
            console.print(f"MCP port: {mcp_port}")
            
            # Validate paths
            app_path_obj = Path(app_path)
            if not app_path_obj.exists():
                console.print(f"[red]‚ùå FastAPI app path not found: {app_path}[/red]")
                return
            
            # Check for port conflicts
            if self._is_port_in_use(port):
                console.print(f"[red]‚ùå Port {port} is already in use[/red]")
                console.print("[yellow]üí° Try a different port or stop the existing service[/yellow]")
                return
            
            if self._is_port_in_use(mcp_port):
                console.print(f"[red]‚ùå Port {mcp_port} is already in use[/red]")
                console.print("[yellow]üí° Try a different port or stop the existing service[/yellow]")
                return
            
            # Generate initial MCP server
            try:
                self.scan(app_path, out_dir, port, interactive=False)
            except Exception as e:
                console.print(f"[red]‚ùå Failed to generate MCP server: {e}[/red]")
                return
            
            # Start processes
            fastapi_process = None
            mcp_process = None
            
            try:
                # Start FastAPI app in background
                console.print("\n[bold yellow]Starting FastAPI app...[/bold yellow]")
                fastapi_process = self._start_fastapi_app(app_path, port)
                
                if not fastapi_process:
                    console.print("[red]‚ùå Failed to start FastAPI app[/red]")
                    return
                
                console.print(f"[green]‚úÖ FastAPI app started on port {port}[/green]")
                
                # Start MCP server
                console.print("\n[bold yellow]Starting MCP server...[/bold yellow]")
                mcp_process = self._start_mcp_server(out_dir, mcp_port)
                
                if not mcp_process:
                    console.print("[red]‚ùå Failed to start MCP server[/red]")
                    self._cleanup_processes([fastapi_process])
                    return
                
                console.print(f"[green]‚úÖ MCP server started on port {mcp_port}[/green]")
                console.print("[yellow]Press Ctrl+C to stop[/yellow]")
                
                # Keep running until interrupted
                try:
                    # Wait for either process to exit
                    while True:
                        if fastapi_process.poll() is not None:
                            console.print("[red]‚ùå FastAPI app stopped unexpectedly[/red]")
                            break
                        if mcp_process.poll() is not None:
                            console.print("[red]‚ùå MCP server stopped unexpectedly[/red]")
                            break
                        time.sleep(1)
                        
                except KeyboardInterrupt:
                    console.print("\n[red]Stopping development mode...[/red]")
                    
            except Exception as e:
                logger.error(f"Failed to start development mode: {e}")
                console.print(f"[red]‚ùå Failed to start development mode: {e}[/red]")
            finally:
                # Cleanup processes
                self._cleanup_processes([fastapi_process, mcp_process])
                
        except Exception as e:
            logger.error(f"Development mode failed: {e}")
            console.print(f"[red]‚ùå Development mode failed: {e}[/red]")
            if logger.isEnabledFor(logging.DEBUG):
                console.print(f"[red]Traceback: {traceback.format_exc()}[/red]")
    
    def _is_port_in_use(self, port: int) -> bool:
        """Check if a port is already in use"""
        import socket
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex(('localhost', port))
                return result == 0
        except Exception:
            return False
    
    def _start_fastapi_app(self, app_path: str, port: int) -> Optional[subprocess.Popen]:
        """Start FastAPI app with proper error handling"""
        try:
            # Check if main.py exists
            main_file = Path(app_path) / "main.py"
            if not main_file.exists():
                console.print(f"[red]‚ùå main.py not found in {app_path}[/red]")
                return None
            
            # Start FastAPI app
            process = subprocess.Popen(
                ["uvicorn", "main:app", "--reload", "--port", str(port), "--host", "0.0.0.0"],
                cwd=app_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Wait a moment to check if it started successfully
            time.sleep(2)
            if process.poll() is not None:
                # Process failed to start
                stdout, stderr = process.communicate()
                console.print(f"[red]‚ùå FastAPI app failed to start:[/red]")
                if stderr:
                    console.print(f"[red]{stderr}[/red]")
                return None
            
            return process
            
        except FileNotFoundError:
            console.print("[red]‚ùå uvicorn not found. Install with: pip install uvicorn[/red]")
            return None
        except Exception as e:
            logger.error(f"Failed to start FastAPI app: {e}")
            console.print(f"[red]‚ùå Failed to start FastAPI app: {e}[/red]")
            return None
    
    def _start_mcp_server(self, out_dir: str, port: int) -> Optional[subprocess.Popen]:
        """Start MCP server with proper error handling"""
        try:
            server_file = Path(out_dir) / "server.py"
            if not server_file.exists():
                console.print(f"[red]‚ùå server.py not found in {out_dir}[/red]")
                return None
            
            # Start MCP server
            process = subprocess.Popen(
                [sys.executable, "server.py"],
                cwd=out_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Wait a moment to check if it started successfully
            time.sleep(2)
            if process.poll() is not None:
                # Process failed to start
                stdout, stderr = process.communicate()
                console.print(f"[red]‚ùå MCP server failed to start:[/red]")
                if stderr:
                    console.print(f"[red]{stderr}[/red]")
                return None
            
            return process
            
        except Exception as e:
            logger.error(f"Failed to start MCP server: {e}")
            console.print(f"[red]‚ùå Failed to start MCP server: {e}[/red]")
            return None
    
    def _cleanup_processes(self, processes: List[Optional[subprocess.Popen]]):
        """Clean up processes gracefully"""
        for process in processes:
            if process and process.poll() is None:
                try:
                    process.terminate()
                    # Wait for graceful shutdown
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    # Force kill if graceful shutdown fails
                    process.kill()
                    process.wait()
                except Exception as e:
                    logger.warning(f"Failed to cleanup process: {e}")
                    console.print(f"[yellow]Warning: Failed to cleanup process: {e}[/yellow]")
    
    def inspect(self, out_dir: str = ".mcp-generated"):
        """Launch MCP Inspector for testing"""
        try:
            console.print(f"[bold blue]üîç Launching MCP Inspector...[/bold blue]")
            self.inspector.launch_inspector(out_dir)
        except Exception as e:
            logger.error(f"Failed to launch inspector: {e}")
            console.print(f"[red]‚ùå Failed to launch inspector: {e}[/red]")
            if logger.isEnabledFor(logging.DEBUG):
                console.print(f"[red]Traceback: {traceback.format_exc()}[/red]")

def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(
        description="Generate MCP servers from FastAPI applications",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  mcp-wrap init my-app                    # Initialize new FastAPI project
  mcp-wrap scan ./my-app                  # Scan and generate MCP server
  mcp-wrap dev ./my-app                   # Development mode with hot reload
  mcp-wrap inspect                        # Launch MCP Inspector
        """
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Init command
    init_parser = subparsers.add_parser("init", help="Initialize new FastAPI project")
    init_parser.add_argument("project_name", nargs="?", help="Project name")
    init_parser.add_argument("--no-interactive", action="store_true", help="Disable interactive mode")
    
    # Scan command
    scan_parser = subparsers.add_parser("scan", help="Scan FastAPI app and generate MCP server")
    scan_parser.add_argument("app_path", help="Path to FastAPI app")
    scan_parser.add_argument("--out-dir", default=".mcp-generated", help="Output directory")
    scan_parser.add_argument("--port", type=int, default=8000, help="FastAPI app port")
    scan_parser.add_argument("--no-interactive", action="store_true", help="Disable interactive mode")
    
    # Dev command
    dev_parser = subparsers.add_parser("dev", help="Development mode with hot reload")
    dev_parser.add_argument("app_path", help="Path to FastAPI app")
    dev_parser.add_argument("--out-dir", default=".mcp-generated", help="Output directory")
    dev_parser.add_argument("--port", type=int, default=8000, help="FastAPI app port")
    dev_parser.add_argument("--mcp-port", type=int, default=8181, help="MCP server port")
    
    # Inspect command
    inspect_parser = subparsers.add_parser("inspect", help="Launch MCP Inspector")
    inspect_parser.add_argument("--out-dir", default=".mcp-generated", help="MCP server directory")
    
    # Global options
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument("--version", action="version", version="MCP Wrap CLI 1.0.0")
    
    args = parser.parse_args()
    
    # Configure logging level
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    
    # Create CLI instance
    cli = MCPWrapCLI()
    
    try:
        if args.command == "init":
            cli.init(args.project_name, not args.no_interactive)
        elif args.command == "scan":
            cli.scan(args.app_path, args.out_dir, args.port, not args.no_interactive)
        elif args.command == "dev":
            cli.dev(args.app_path, args.out_dir, args.port, args.mcp_port)
        elif args.command == "inspect":
            cli.inspect(args.out_dir)
        else:
            # Show welcome message and interactive menu
            console.print(Panel.fit(
                Text("MCP Wrap CLI", style="bold blue"),
                subtitle="Generate MCP servers from FastAPI applications"
            ))
            
            choices = [
                "Initialize new FastAPI project",
                "Scan existing FastAPI app",
                "Development mode",
                "Launch MCP Inspector",
                "Exit"
            ]
            
            choice = questionary.select(
                "What would you like to do?",
                choices=choices
            ).ask()
            
            if choice == choices[0]:
                cli.init()
            elif choice == choices[1]:
                cli.scan(".")
            elif choice == choices[2]:
                cli.dev(".")
            elif choice == choices[3]:
                cli.inspect()
            elif choice == choices[4]:
                console.print("[blue]üëã Goodbye![/blue]")
                return
            
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Operation cancelled by user[/yellow]")
    except Exception as e:
        logger.error(f"CLI failed: {e}")
        console.print(f"[red]‚ùå CLI failed: {e}[/red]")
        if args.debug:
            console.print(f"[red]Traceback: {traceback.format_exc()}[/red]")
        sys.exit(1)

if __name__ == "__main__":
    main() 