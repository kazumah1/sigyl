# Auto-generated MCP Server Configuration
# 
# This file defines the tools available in your MCP server.
# Each tool corresponds to an endpoint in your Express application.
# 
# To add a new tool manually:
# 1. Add a new entry to the tools array below
# 2. Define the inputSchema with your tool's parameters
# 3. Optionally define outputSchema for the expected response
# 4. Update the corresponding tool handler in server.ts

name: generated-mcp-server
description: Auto-generated MCP server from Express endpoints
version: 1.0.0
tools:
# ============================================================================
# AUTO-GENERATED TOOLS FROM EXPRESS ENDPOINTS
# ============================================================================
# These tools were automatically generated from your Express application.
# Each tool corresponds to an endpoint in your Express app.

  - name: getApiUsers
    description: GET /api/users
    inputSchema:
      type: object
      properties: {}
      required: []
    outputSchema:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
            description: "Response property: id"
          name:
            type: string
            description: "Response property: name"
          email:
            type: string
            description: "Response property: email"
        required:
          - id
          - name
          - email
  - name: getApiUsersById
    description: GET /api/users/:id
    inputSchema:
      type: object
      properties:
        id:
          type: number
          description: "Path parameter: id"
          required: true
      required:
        - id
    outputSchema:
      type: object
      description: Response from GET /api/users/:id
  - name: postApiUsers
    description: POST /api/users
    inputSchema:
      type: object
      properties:
        body:
          type: object
          description: Request body data
      required: []
  - name: putApiUsersById
    description: PUT /api/users/:id
    inputSchema:
      type: object
      properties:
        id:
          type: number
          description: "Path parameter: id"
          required: true
        body:
          type: object
          description: Request body data
      required:
        - id
    outputSchema:
      type: object
      description: Response from PUT /api/users/:id
  - name: deleteApiUsersById
    description: DELETE /api/users/:id
    inputSchema:
      type: object
      properties:
        id:
          type: number
          description: "Path parameter: id"
          required: true
      required:
        - id
    outputSchema:
      type: object
      properties:
        message:
          type: object
          description: "Response property: message"
      required:
        - message

# ============================================================================
# MANUAL TOOL TEMPLATE
# ============================================================================
# To add a new tool manually, uncomment and modify the template below:
/*
// ===== CUSTOM TOOL NAME =====
server.tool(
	"myCustomTool",
	"Description of what this tool does",
	z.object({
		// ===== INPUT PARAMETERS =====
		// Define your tool's input parameters here
		param1: z.string().describe("Description of param1"),
		param2: z.number().optional().describe("Optional numeric parameter"),
		// For complex objects:
		// body: z.object({
		//     field1: z.string(),
		//     field2: z.number()
		// }).optional()
	}),
	async (args) => {
		// ===== REQUEST CONFIGURATION =====
		const url = "https://api.example.com/endpoint";
		const method = "POST";
		
		// Build request options
		const requestOptions: any = {
			method,
			headers: {
				"Content-Type": "application/json",
			},
		};

		// ===== PARAMETER HANDLING =====
		const queryParams = new URLSearchParams();
		const bodyParams: any = {};
		// Example: Add query parameters
		// if (args.param1) queryParams.append("param1", args.param1);
		// Example: Add body parameters
		// if (args.body) Object.assign(bodyParams, args.body);

		// ===== URL CONSTRUCTION =====
		if (queryParams.toString()) {
			const separator = url.includes('?') ? '&' : '?';
			requestOptions.url = `${url}${separator}${queryParams.toString()}`;
		} else {
			requestOptions.url = url;
		}
		if (["POST", "PUT", "PATCH"].includes(method) && Object.keys(bodyParams).length > 0) {
			requestOptions.body = JSON.stringify(bodyParams);
		}

		// ===== CUSTOM LOGIC & HTTP REQUEST =====
		try {
			// Example: Make an HTTP request
			// const response = await fetch(requestOptions.url, requestOptions);
			// const data = await response.json();
			// Example: Custom logic without HTTP request
			const result = {
				message: "Custom tool executed successfully",
				parameters: args,
				timestamp: new Date().toISOString()
			};
			return {
				content: [
					{
						type: "text",
						text: JSON.stringify(result, null, 2)
					}
				]
			};
		} catch (error) {
			return {
				content: [
					{
						type: "text",
						text: `Error in custom tool: ${error.message}`
					}
				]
			};
		}
	}
);
*/
